name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Run tests
        run: ./gradlew test

      - name: Run SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube -Dsonar.projectKey=scaffold-bancolombia -Dsonar.organization=bancolombia -Dsonar.host.url=https://sonarcloud.io

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-service-jar
          path: applications/app-service/build/libs/*.jar

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-service-jar
          path: deployment/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./deployment
          push: true
          tags: |
            bancolombia/scaffold-usuarios:latest
            bancolombia/scaffold-usuarios:${{ github.sha }}

  deploy-dev:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Deploy to Development Environment
        run: echo "Deploying to development environment"
        # Aquí irían los comandos para desplegar en tu entorno de desarrollo
        # Por ejemplo, utilizando kubectl, Helm, o cualquier otra herramienta de despliegue

  deploy-prod:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
      - name: Deploy to Production Environment
        run: echo "Deploying to production environment"
        # Aquí irían los comandos para desplegar en tu entorno de producción
        # Por ejemplo, utilizando kubectl, Helm, o cualquier otra herramienta de despliegue
